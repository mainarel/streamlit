import streamlit as st
import pandas as pd
from streamlit_option_menu import option_menu


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª–µ–π, –Ω–æ –Ω–µ —Å–∞–º–∏ –º–æ–¥—É–ª–∏
def load_data():
    df = pd.read_csv("data/my_database.csv")
    return df


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é option_menu
with st.sidebar:
    selected = option_menu(
        menu_title="–ù–∞–≤–∏–≥–∞—Ü–∏—è",
        options=["–ì–ª–∞–≤–Ω–∞—è", "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–ö—Ä–æ—Å—Å-—Ç–∞–±–ª–∏—Ü–∞", "–ì—Ä–∞—Ñ–∏–∫–∏"],
        icons=["üè†", "üìä", "", "üìà"],
        default_index=0,
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
if selected == "–ì–ª–∞–≤–Ω–∞—è":
    st.write("–≠—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

elif selected == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":

    from _pages.data_overview import *

    tab1_all, tab2_columns = st.tabs(["All", "Columns"])

    with tab1_all:
        show_page(df)
        data_shape(df)
        displayTypes(df)
        countsNulls(df)
        show_categorical_columns_and_unique_values(df)

        isDuplicateRows(df)

    with tab2_columns:
        with st.expander("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", expanded=True):
            descriptiveStatistics(
                df,
                numeric_columns=df.select_dtypes(include=["number"]).columns.tolist(),
                non_numeric_columns=df.select_dtypes(
                    exclude=["number"]
                ).columns.tolist(),
            )

        with st.expander("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º", expanded=True):
            generateSummary(df)

elif selected == "–ö—Ä–æ—Å—Å-—Ç–∞–±–ª–∏—Ü–∞":

    from _pages.data_overview import generate_cross_table

    st.title("–ö—Ä–æ—Å—Å-—Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    vertical_columns = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π", df.columns.tolist()
    )

    # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    horizontal_columns = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π", df.columns.tolist()
    )

    # –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    aggregation_types = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏", ["sample", "percent", "mean"]
    )

    # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    values_column = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", ["sample", "percent", "mean"]
    )

    if vertical_columns and horizontal_columns and aggregation_types and values_column:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å-—Ç–∞–±–ª–∏—Ü—É
        cross_table_data = generate_cross_table(
            df, vertical_columns, horizontal_columns, values_column, aggregation_types
        )

        if cross_table_data is not None:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.dataframe(cross_table_data)
    else:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–æ—Å—Å-—Ç–∞–±–ª–∏—Ü—ã")

elif selected == "–ì—Ä–∞—Ñ–∏–∫–∏":

    from _pages.charts import *

    show_charts(df)
